import React, { useMemo } from 'react';
import { Table, Text, Group, Badge, ScrollArea } from '@mantine/core';
import dayjs from 'dayjs';

type MesSalario = {
  mes: dayjs.Dayjs;
  salarioAtual?: number | null;
  salarioNovo?: number | null;
  diferencaNominal?: number;
  indiceMes?: number; // percentual ex: 0.42
  coeficiente?: number; // ex: 1.0123
  valorAtualizado?: number;
  erro?: string | null;
  vigenciaNome?: string | null;
};

type Props = {
  precomputedMeses: MesSalario[] | null;
  showHeader?: boolean;
};

function formatCurrency(v?: number | null) {
  if (v === null || typeof v === 'undefined' || isNaN(v)) return '—';
  return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(v);
}

function formatPercent(p?: number | null) {
  if (p === null || typeof p === 'undefined' || isNaN(p)) return '—';
  // índice recebido como 0.42 representa 0,42%
  return `${p.toFixed(2).replace('.', ',')}%`;
}

function formatCoef(c?: number | null) {
  if (c === null || typeof c === 'undefined' || isNaN(c)) return '—';
  return c.toFixed(6).replace('.', ',');
}

/**
 * TabelaResultadoPromocao
 * Mantive o layout anterior (colunas principais) e acrescentei:
 * - Índice Mensal
 * - Coeficiente de Atualização
 * - Valor Atualizado
 * - Linha de totais com soma das diferencaNominal (informativa) e total atualizado
 */
export function TabelaResultadoPromocao({ precomputedMeses, showHeader = true }: Props) {
  const meses = precomputedMeses ?? [];

  const rows = useMemo(
    () =>
      meses.map((m) => {
        const mesLabel = m.mes ? dayjs(m.mes).format('MM/YYYY') : '—';
        const salarioAtual = typeof m.salarioAtual === 'number' ? m.salarioAtual : null;
        const salarioNovo = typeof m.salarioNovo === 'number' ? m.salarioNovo : null;
        const diferencaNominal =
          typeof m.diferencaNominal === 'number' ? m.diferencaNominal : (salarioNovo ?? 0) - (salarioAtual ?? 0);
        const indiceMes = typeof m.indiceMes === 'number' ? m.indiceMes : null;
        const coef = typeof m.coeficiente === 'number' ? m.coeficiente : null;
        const valorAtualizado =
          typeof m.valorAtualizado === 'number' ? m.valorAtualizado : diferencaNominal * (coef ?? 1);

        return {
          mesLabel,
          salarioAtual,
          salarioNovo,
          diferencaNominal,
          indiceMes,
          coef,
          valorAtualizado,
          erro: m.erro ?? null,
          vigenciaNome: m.vigenciaNome ?? null,
        };
      }),
    [meses],
  );

  const totalAtualizado = useMemo(() => {
    return rows.reduce((s, r) => s + (typeof r.valorAtualizado === 'number' ? r.valorAtualizado : 0), 0);
  }, [rows]);

  const totalNominal = useMemo(() => {
    return rows.reduce((s, r) => s + (typeof r.diferencaNominal === 'number' ? r.diferencaNominal : 0), 0);
  }, [rows]);

  return (
    <ScrollArea>
      <Table
        striped
        highlightOnHover
        mt="xl"
        withTableBorder
        withColumnBorders
        style={{
          borderRadius: 8,
          overflow: 'hidden',
          border: '1px solid var(--mantine-color-green-9)',
        }}
      >
        {showHeader && (
          <Table.Thead
            style={{
              backgroundColor: 'var(--mantine-color-green-9)',
              color: 'white',
              fontWeight: 600,
              fontSize: '0.875rem',
              letterSpacing: '0.5px',
            }}
          >
            <Table.Tr>
              <Table.Th>Mês</Table.Th>
              <Table.Th style={{ minWidth: 120 }}>Salário Atual</Table.Th>
              <Table.Th style={{ minWidth: 120 }}>Salário Novo</Table.Th>
              <Table.Th style={{ minWidth: 120 }}>Diferença Nominal</Table.Th>

              {/* Novas colunas demonstrativas adicionadas sem alterar o restante do layout */}
              <Table.Th style={{ minWidth: 120 }}>Índice Mensal</Table.Th>
              <Table.Th style={{ minWidth: 140 }}>Coeficiente (até hoje)</Table.Th>
              <Table.Th style={{ minWidth: 140 }}>Valor Atualizado</Table.Th>
            </Table.Tr>
          </Table.Thead>
        )}

        <tbody>
          {rows.length === 0 ? (
            <Table.Tr>
              <Table.Td colSpan={8}>
                <Text c="dimmed" ta="center">
                  Não há dados mensais para exibir.
                </Text>
              </Table.Td>
            </Table.Tr>
          ) : (
            rows.map((r, i) => (
              <Table.Tr key={r.mesLabel + i}>
                <Table.Td>
                  <Text fw={600}>{r.mesLabel}</Text>
                </Table.Td>
                <Table.Td>{formatCurrency(r.salarioAtual)}</Table.Td>
                <Table.Td>{formatCurrency(r.salarioNovo)}</Table.Td>
                <Table.Td>{formatCurrency(r.diferencaNominal)}</Table.Td>

                {/* Novas colunas */}
                <Table.Td>{r.indiceMes !== null ? formatPercent(r.indiceMes) : '—'}</Table.Td>
                <Table.Td>{formatCoef(r.coef)}</Table.Td>
                <Table.Td>{formatCurrency(r.valorAtualizado)}</Table.Td>
              </Table.Tr>
            ))
          )}
        </tbody>

        {rows.length > 0 && (
          <Table.Tfoot>
            <Table.Tr>
              <Table.Td colSpan={3} />
              <Table.Td>
                <Text fw={800}>{formatCurrency(totalNominal)}</Text>
              </Table.Td>
              <Table.Td />
              <Table.Td />
              <Table.Td>
                <Text fw={800} c="teal.8">
                  {formatCurrency(totalAtualizado)}
                </Text>
              </Table.Td>
              <Table.Td />
            </Table.Tr>
          </Table.Tfoot>
        )}
      </Table>
    </ScrollArea>
  );
}

export default TabelaResultadoPromocao;
